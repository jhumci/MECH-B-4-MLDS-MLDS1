# Tutorial: Monte Carlo Simulation of Vehicle Component Failure {.unnumbered}

## Ziel {#sec-monte-carlo-objective}

In dieser Übung erstellen Studierende eine Monte-Carlo-Simulation zur Modellierung der Ausfallzeit von Fahrzeugkomponenten. Dabei werden Wahrscheinlichkeitskonzepte wie bedingte Wahrscheinlichkeit, Additions- und Multiplikationsregeln, statistische Unabhängigkeit sowie Visualisierung durch ein __Histogramm__ vertieft.

## Szenario und Anwendungsfall {#sec-monte-carlo-story}

### Szenario

Ein Auto besteht aus kritischen Komponenten: _Motor_, _Sensoren_ und _Steuereinheit_. Fällt der _Motor_ oder die _Steuereinheit_ aus, stoppt das Fahrzeug. Der Besitzer möchte die erwartete Betriebsdauer bis zum Ausfall abschätzen, um Wartungsintervalle zu planen.

### Anwendungsfall

Die Studierenden simulieren das Ausfallverhalten eines Fahrzeugs mit drei Komponenten:  
- __Motor__: Ausfallzeit folgt einer [Poissonverteilung](https://de.wikipedia.org/wiki/Poisson-Verteilung) mit Mittelwert 5000 Stunden.  
- __Sensor__: Ausfallzeit folgt einer Normalverteilung mit $\mu = 6000$ Stunden, $\sigma = 100$ Stunden.  
- __Steuereinheit__: Ausfallzeit folgt einer Gleichverteilung zwischen 4000 und 8000 Stunden.  
- __Bedingung__: Fällt der Sensor vor dem Motor aus, verkürzt sich die Motor-Ausfallzeit um 1000 Stunden.  
- __Stopp__: Das Fahrzeug stoppt, wenn Motor oder Steuereinheit ausfällt.

#### Aufgaben

##### Simulation

1. Simuliere Ausfallzeiten für jede Komponente des Fahrzeugs.
2. Bestimme die Zeit bis zum Ausfall des Fahrzeugs.
3. Wiederhole dies für 10.000 Durchläufe.
4. Stelle die Ausfallzeiten in einem Histogramm dar (@fig-monte-carlo-failure-histogram).

##### Analyse

Für die weitere Anaylse nehmen wir an, dass wir den Zufallsprozess der Ausfälle nicht kennen. Wir können jedoch die Ausfallereignisse aufzeichnen und analysieren. Wir interessieren uns nur für Ausfälle, die zu einem Stopp des Fahrzeugs vor 5000 Stunden führen.

5. Berechne für jede Komponente die Wahrscheinlichkeit, dass sie ausgefallen ist, gegen das Fahrzeug fällt vor 5000 Stunden aus. 
6. Gibt es eine Korrelation zwischen allen Ausfallzeiten aller Komponenten und des Fahrzeugs? Berechne die Korrelationskoeffizienten und visualisiere es in einer Scatterplot-Matrix.
7. Wie hoch ist die Wahrscheinlichkeit, dass die Steuereinheit den ausgefallen ist, wenn das Fahrzeug vor 5000 Stunden ausgefallen ist.

## Simulation {#sec-monte-carlo-simulation}

Zuerst erstellen wir einen leeren DataFrame, um die Struktur der simulierten Ausfallzeiten zu zeigen:

```{python}
#| classes: styled-output
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)
n_trials = 10000

# Leerer DataFrame für Ausfallzeiten
columns = ['motor', 'sensor', 'control', 'vehicle_failure']
df = pd.DataFrame(index=range(n_trials), columns=columns)
print("Leerer DataFrame (Auszug):")
print(df.head())
```

Nun simulieren wir die Ausfallzeiten und berechnen die Zeit bis zum Fahrzeugausfall:

```{python}
#| classes: styled-output
#| label: fig-monte-carlo-failure-histogram
#| fig-cap: Histogramm der Ausfallzeiten des Fahrzeugs (10.000 Durchläufe).
for trial in range(n_trials):
    # Ausfallzeiten für das Fahrzeug
    motor_time = np.random.poisson(5000)
    sensor_time = np.random.normal(6000, 100)
    control_time = np.random.uniform(4000, 8000)

    # Bedingung: Sensor-Ausfall verkürzt Motorzeit
    if sensor_time < motor_time:
        motor_time -= 1000

    # Ausfallzeit des Fahrzeugs (Motor oder Steuereinheit)
    vehicle_failure = min(motor_time, control_time)

    # Daten in DataFrame speichern
    df.loc[trial, 'motor'] = motor_time
    df.loc[trial, 'sensor'] = sensor_time
    df.loc[trial, 'control'] = control_time
    df.loc[trial, 'vehicle_failure'] = vehicle_failure

print("DataFrame mit simulierten Ausfallzeiten (Auszug):")
print(df.head())

plt.hist(df['vehicle_failure'], bins=50, density=True, color='skyblue', alpha=0.7)
plt.xlabel('Ausfallzeit des Fahrzeugs (Stunden)')
plt.ylabel('Dichte')
plt.title('Verteilung der Ausfallzeiten (Fahrzeug)')
plt.show()
```

